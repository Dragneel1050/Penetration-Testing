INJECTION
BROKEN AUTHENTICATION
SENSITIVE DATA EXPOSURE
XML EXTERNAL ENTITIES (XXE)
BROKEN ACCESS CONTROL
SECURITY MISCONFIGURATION
CROSS SITE SCRIPTING (XSS)
INSECURE DESERIALIZATION
USING COMPONENTS WITH KNOWN VULNERABILITIES
INSUFFICIENT LOGGING AND MONITORING

INJECTION:
	Injection occurs when untrusted data is sent to an interpreter as part of a command or query. The attacker can trick the interpreter into executing unintended commands or accessing data without proper authorization.
	Injection can result in data loss, corruption, or disclosure to unauthorized parties, loss of accountability, or denial of access. Injection can also lead to complete host takeover.	


Reasons for injection:
• User-supplied data is not validated, filtered, or sanitized by the application. (the main reason…. Rest are just the child reasons)

• Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter.

• Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records.

• Hostile data is directly used or concatenated, such that the SQL or command contains both structure and hostile data in dynamic queries, commands, or stored procedures.


Prevention:
• The preferred option is to use a safe API, which avoids the use of the interpreter entirely or provides a parameterized interface, or migrate to use Object Relational Mapping Tools (ORMs). Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data, or executes hostile data with EXECUTE IMMEDIATE or exec().

• Use positive or “whitelist” server-side input validation.

• For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. Note: SQL structure such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software.

• Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.

